---
title: "Music Popularity Prediction Model -- Final Report"
subtitle: |
  | Final Project 
  | Data Science 2 with R (STAT 301-2)
author: "Olivia Harbison"
date: today

format:
  html:
    toc: true
    embed-resources: true
    
execute:
  echo: false
  warning: false

from: markdown+emoji 
reference-location: margin
citation-location: margin
---

```{r packages}
#| echo: false
library(tidyverse)
library(tidymodels)
library(here)

tidymodels_prefer()
set.seed(80)

# note: all data will be loaded throughout the document / as needed
```

## Introduction

The music industry is a fickle beast. Everyone wants to have the next hit and be the next Taylor Swift, but how do we make a star? If we could predict what makes songs or albums popular, we could become the next big thing. This is one of many reasons I chose to explore music popularity for my project.

Although I personally have no interest in becoming a pop star, I love listening to music and I've always been curious as to what makes some songs popular and others not. To dig into this, I found a dataset that contains information scraped from Spotify about individual songs and their popularity[^1]. I will use this data to create a model that predicts how popular music albums are on a scale of 1 to 100.

[^1]: This dataset can be found [here](https://www.kaggle.com/datasets/elemento/music-albums-popularity-prediction?select=train.csv) on kaggle.

## Data Overview

The full dataset used here is 160,000 albums from 1917 to 2021, with the marjority having been released in the last 40 years. For computational efficiency, I'm going to use only albums released between 1980 and 2010. Furthermore, I removed all albums containing fewer than three songs, because I feel they should not be classified as albums. Once these changes were made, the dataset was left with 19,184 observations.

The slimmed down dataset had 39 variables, of which 32 were numerical, 6 were categorical, and 1 was the release date. There was no missingness present, but there were some imbalanced variables that were dealt with in the advanced recipe below. An exploratory data analysis was conducted to explore variable imbalance and relationships between variables. More information can be found below in the appendix.

The target variable in this set of regression models is the popularity of the album. This was scored on a scale of 1 to 100, with 100 being very popular and 1 being not popular. The variable did not need to be transformed. Furthermore, possible relationships between the target variable and predictor variables were explored but no clear relationships were found. There was a slight relationship between popularity and energy level, but not major enough to make any adjustments.

## Methods

For this project, I'm doing a series of regression models to identify the one that performs the best at predicting the numerical target variable (popularity). I'm testing 6 different types of models on two different recipes (for 12 total models), then selecting the best one based on the root-mean-square deviation (RMSE). I chose RMSE as my main assessment metric because it does a good job punishing outliers more than other common metrics. I believe this will be valuable due to the amount of outliers in my dataset. The six models include two baseline models: null and linear, and four more advanced models: K nearest neighbors, random forest, boosted tree, and elastic net. Each of these models will be tuned appropriately (more details below).

To start, I split the data into training and testing groups with an 80/20 proportion. I chose this split because it's a fairly large dataset, so 20% in the testing set should be enough to get a strong assessment while 80% in the training set will be enough to create a good fit for the models. Next, I used v-fold cross validation. I chose this resampling technique instead of another (such as bootstrapping) because although it often has high variance, it is usually more accurate in its best estimations. Due to the high computational complexity of this project, I chose to do only 5 folds and 3 repeats. Furthermore, I stratified by the target variable for increased accuracy.

As mentioned above, two recipes were used with the 6 model types, for a total of 12 models generated. The first recipe, which I will refer to as the *kitchen sink* recipe, includes every predictor variable and only the absolutely necessary feature engineering (ex. creating dummy variables for the categorical variables). This recipe was meant to provide a comparison for my more advanced recipe to see what impact my feature engineering has. This recipe was run on all 6 model types.

The second recipe, which I will call the *advanced* recipe, contains every predictor variable and more advanced feature engineering. Here again I created dummy variables for the categorical variables. Additionally, I included a step to transform the numerical variables that were not naturally normal. I chose this step (step_BoxCox) because it runs through all of the possible exponents for transformation and selects the best one for each variable. This maximized the affect of the transformations. Additionally, for the parametric models, I included interaction terms between variables that I found to be highly correlated during my EDA. Next, I removed variables that had near zero variance or zero variance so they did not disrupt the models' results. Finally, I centered and scaled all of the predictors. 


## Model Building & Selection Results

When building the models used in this project, I tuned all appropriate parameters based on balancing the dataset's unique needs and my computer's computational power. The parameters tuned were mtry, min_n and learn_rate for the boosted tree model. For the random forest model mtry and min_n were tuned. For the elastic net model the parameters tuned were penalty and mixture. Finally, for the k nearest neighbor model the neighbors parameter was tuned. For details of how each of the parameters were tuned and which parameters were best for each model, please see the appendix.

To choose which model and recipe combination is the best, I decided to use the RMSE metric to compare them. I chose this metric because of its harshness to outliers and the simplicity of being able to easily compare between models. As you can see below in @tbl-rmse, the models that use the *kitchen sink* recipe are labeled "KS" and the models that use the *advanced* recipe are labeled "Adv Rec". The model with the lowest and best RMSE value is the KS Random Forest model. 

```{r}
#| label: tbl-rmse
#| echo: false
#| tbl-cap: RMSE Values by Model


load(here("results/rmse_table.rda"))
knitr::kable(rmse_table)
```

The two random forest models were the best performing models, which demonstrates this model type is highly accurate for this kind of data. Next, the KNN and boosted tree models performed fairly similarly to each other and not much more poorly than the random forest models. These performed much better than the elastic net, linear, and null models. It's not surprising that one of the random forest models performed the best, because random forests tend to have high accuracy (at the cost of high computational need). This led me to hypothesize that either a random forest model or a boosted tree model would be the best. On the other hand, it was surprising to see that the *kitchen sink* recipe and the *advanced* recipe played almost no difference in the random forest model results. I expected the *advanced* recipe to produce better results, as it did in most of the other models. However, it also did not make a difference for the boosted tree model. Upon further reflection, I think this actually makes sense because the tree model recipe did not have an impact because there were no interaction terms in it, which likely caused an effect in the other models. Furthermore it is characteristic of tree models to be less influenced by a recipe and more just focused on the trees. Additionally, tree based models are more naturally able to adjust to irregular data, so the normalization and transformations also didn't play a big role.


## Final Model Analysis

The final model is going to be the *kitchen sink* random forest model because this model performed the best during testing. The assessment metrics for this model when fit on the testing data can be seen in @tbl-final-mets. As we can see, the RMSE here is even lower than it was when fit on the training data, which is a sign of a well fit model! Additionally, the MAE is fairly low at 4.327 and the R squared is fairly high at 0.76. Although this model is not perfect, it performs quite well considering it is modeling something so complex as music popularity.

```{r}
#| label: tbl-final-mets
#| tbl-cap: Metrics for Final Model
#| echo: false

load(here("results/final_mets.rda"))

knitr::kable(final_mets)
```


Furthermore, this model performs significantly better than the baseline models, which had RMSE values around 17. This shows there can be strong pay off of building more complex models, particularly when more accurate predictions are needed. We can see below in @fig-preds, the relationship between the final model's predictions and the actual popularity.

```{r}
#| label: fig-preds
#| fig-cap: Predicted vs actual popularity
#| echo: false

load(here("results/results_plot.rda"))
results_plot
```


Should include an exploration of predictions vs the true values (graph) Is the model any good? It might be the best of the models you tried, but does the effort of building a predictive model really pay off â€” is it that much better than a baseline/null model? Were there any features of the model you selected that make it the best (e.g. fits nonlinearity well)?

## Conclusion

State any conclusions or discoveries/insights. This is a great place for future work, new research questions, and next steps.

## References

Agarwal, M., & Elemento. (2022). Music Albums Popularity Prediction. Kaggle. <https://www.kaggle.com/datasets/elemento/music-albums-popularity-prediction>

### Appendix: Tuning Parameters

details of what was tuned & how, some autoplots

then details of the best parameters for each model (show_best)

### Appendix: EDA

A place to place a more thorough EDA, if needed. This should not include any data from the testing dataset!

-   put some of the skewed histograms in here
-   put something demonstrating the relationships put into the interaction terms

### Appendix: extras â€” if needed

Add as many appendices as needed.
